#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>			 /*文件控制*/
#include <sys/time.h>	 		/*时间方面的函数*/
#include <errno.h>		 	/*有关错误方面的宏*/
#include <sys/poll.h> 			//poll()
#include <string.h> 			//memset()


#include "test.h"
#include "testlib.h"
#include "TaskManage.h"

#ifdef FPAG_APP_DEBUG
#define FDEBUG(fmt, args...)	printf("APP: " fmt "\n", ##args)
#else
#define FDEBUG(fmt, args...)
#endif
#define FERR(fmt, args...)		printf("APP[ERR]: " fmt "\n", ##args)

extern unsigned char hasDirectTask;
extern GK_OPCUA_TASK DIRECT_TRIGGER_TASK, DIRECT_SETPARA_TASK;

int handleStartTestTask();
void handleTimerTask();
int handleNewSchedule( unsigned char* pSchBUF, unsigned short bufLength );
int handleStopTestTask();

unsigned char	currentTimerTask;			//the count of TimerTask
unsigned char	currentSynTask;				//the count of SynTask
unsigned char  inTesting;			//if the test is running
unsigned char  unhandledTTs;
unsigned char  unhandledTTs_1;			//
unsigned long  gpioData;
unsigned int   fdint;
unsigned int fd ;


struct pollfd event;	

extern unsigned char  unhandledTTs_1;
extern unsigned char synTaskCount;		//how many syn tasks
extern unsigned char timerTaskCount;		//how many timer tasks
extern unsigned char hasNewSchedule;
extern unsigned char hasStartTestTask;		//has new Start Test Task?
extern unsigned char hasStopTestTask;		//received stop test task?
extern unsigned char hasDirectTask;
extern unsigned char 	SCHEDULE_BUF[MAX_SCHEDULE_LEN];
extern unsigned int	 	schedule_len;
extern int backflag;
// used for Start-Test task
extern unsigned short	START_TASK_PARA;		//¡°Æô¶¯²âÊÔ¡±Ö±œÓÈÎÎñµÄ²ÎÊý

// used for Stop-Test task
extern unsigned char	STOP_TASK_PARA;			//¡°Í£Ö¹²âÊÔ¡±Ö±œÓÈÎÎñµÄ²ÎÊý

// used for Timer task
extern GK_OPCUA_TASK	TIMER_TASK_BUF[MAX_TIMER_TASK_COUNT];

// used for task para
extern unsigned char		TASK_PARA_BUF[PARANODE_COUNT][MAX_TASK_PARA_LEN];
extern GK_OPCUA_TASK DIRECT_TRIGGER_TASK, DIRECT_SETPARA_TASK;
//char *dev_file2 = "/dev/fpga_device";
extern unsigned short fdev_rword(int fd, unsigned int addr);
extern int fdev_wword(int fd, unsigned int addr, unsigned short dat);
void my_init()
{
	hasNewSchedule = 0;
	hasStartTestTask = 0;
	hasStopTestTask = 0;
	inTesting = 0;

	timerTaskCount = 0;
//	synTaskCount = 0;
	
	unhandledTTs = 0;
	unhandledTTs_1=0;
	hasDirectTask = 0;

	//int sem_status=sem_init(p_timer_sem, 0, 0);
}

void *main_thread()
{
	int needDelay;
	
	my_init();
	
	DIRECT_SETPARA_TASK.u16TaskID = GK_OPCUA_TASK_SEND_PARAMETER;
	DIRECT_TRIGGER_TASK.u16TaskID = GK_OPCUA_TASK_TRIGGER;
	
//	hasStartTestTask = 0xAA;
	timerTaskCount = 100;

		 
	while(1)
	{
	 
		needDelay = 1;
		
		if ( hasStopTestTask == 0xAA )
			handleStopTestTask();
		
		if ( hasStartTestTask == 0xAA )
		{
			printf("succeed entering main_thread(),ready to start handleStartTestTask()...\r\n");
			handleStartTestTask();
		}	

		if ( inTesting != 0xAA )	//²âÊÔÖŽÐÐÆÚŒä²»ÖŽÐÐÒÔÏÂ¶¯×÷
		{
			if ( hasNewSchedule == 0xAA )
			{
				printf( "schedule_len_zs = %d\r\n",schedule_len );
				handleNewSchedule( SCHEDULE_BUF,schedule_len );   //°ÑÊ±Œä±í²ÎÊýžŽÖÆµœÖÆ¶šÇøÓò
			}
		
		} else
		{
			if ( unhandledTTs > 0 )
			{DIRECT_TRIGGER_TASK.u16TaskID = GK_OPCUA_TASK_TRIGGER;
				handleTimerTask();
			}

		}
		
		if ( needDelay == 1 )
			usleep(10000);		
	}	

}

int handleNewSchedule( unsigned char* pSchBUF, unsigned short bufLength )
{
	int i = 0;
	unsigned long* pBuf = (unsigned long* )pSchBUF;

        fdev_wword(fd,0x0702,(short unsigned)(bufLength));
        printf( "data_length send to bram2: %4x\n",(short unsigned)(bufLength) );
	fdev_wword(fd,0x0702,(short unsigned)(bufLength>>16));
        printf( "data_length send to bram1: %4x\n",(short unsigned)(bufLength>>16) );




	int sendcount=( bufLength/4 ) + ( (bufLength%4) == 0?0:1);
	printf( "sendcount = %d\r\n",sendcount );
	printf( "bufLength = %d\r\n",bufLength );
	int array[100];
	for(i=0;i<sendcount-1;)
	{
				
		array[i]=(short unsigned)(*pBuf>>16);           //change 32bits to 16bits--get low 16bits
		array[i] = ntohs(array[i]);                
		fdev_wword(fd,0x0702,array[i]);
		printf( "data send to bram: %4x\n",array[i] );
		array[i+1]=(short unsigned)*pBuf;     		//change 32bits to 16bits--get high 16bits 
		array[i+1] = ntohs(array[i+1]);                    
		fdev_wword(fd,0x0702,array[i+1]);
		printf( "data send to bram: %4x\n",array[i+1] );

		pBuf++;
		i++;
	}
	
	
	
	hasNewSchedule = 0;
}	

int handleStartTestTask()
{
	
	int semvalue, sem_status;
	
	printf("handleStartTestTask:\n");
	
	hasStartTestTask = 0;
	inTesting = 0xAA;
	
	unhandledTTs = 0;

	currentTimerTask = 0;
	currentSynTask = 0;
	
	hasDirectTask = 0;

	fdev_wword(fd,0x0708,0xaaaa);
        fdev_wword(fd,0x0706,0xaaaa);

	printf("\r\ntimer start...\r\n");
	
}

int handleStopTestTask()
{

	hasStopTestTask = 0;
	inTesting = 0;

	currentTimerTask = 0;
	
	timerTaskCount = 0;
	synTaskCount = 0;
	
	unhandledTTs = 0;
	
	fdev_wword(fd,0x0708,0xaaaa);
        printf("\r\ntimer stop...\r\n");
	
}
 
void handleTimerTask()
{
		
	while ( (currentTimerTask < timerTaskCount) && unhandledTTs > 0 )
	{
		distributeTask( GK_OPCUA_TIMER_TASK, &TIMER_TASK_BUF[currentTimerTask] );

		unhandledTTs--;
		currentTimerTask++;
            
		
                printf("currentTimerTask=%d \n" , currentTimerTask);
                printf("timertask=%0x \n" , TIMER_TASK_BUF[currentTimerTask]);
	}

}
	
void distributeTask( unsigned long funcode, GK_OPCUA_TASK *pTask )
{
		
		DIRECT_SETPARA_TASK.u16TaskID = GK_OPCUA_TASK_SEND_PARAMETER;
		DIRECT_TRIGGER_TASK.u16TaskID = GK_OPCUA_TASK_TRIGGER;
		if ( funcode != GK_OPCUA_DIRECT_TASK )
		{
			pTask->u16BufferRegion &= 0x0007;
			pTask->u16BufferRegion--;	
			pTask->u16TaskID = ntohs( pTask->u16TaskID );
			pTask->ulParaLen = ntohl(pTask->ulParaLen);
			pTask->ulParaStart=ntohl(pTask->ulParaStart);
		}
		// pTask->u16TaskID = ntohs( pTask->u16TaskID );
		printf("TaskID = %x !\n", pTask->u16TaskID);
		switch ( pTask->u16TaskID )
		{
			case GK_OPCUA_TASK_SEND_PARAMETER:
				setPara( pTask );
				printf("this is setPara!!\n");
				break;
			case GK_OPCUA_TASK_TRIGGER:
				performTask( pTask );
				printf("this is performtask!!\n");
				break;

			default:
				break;
		}	
}

void *interrupt()
{
	
	int zs_count=0;
	int ret;
		
	for(;;)

	{
	memset(&event,0,sizeof(event));
	event.fd=fdint;						 	//存放打开的文件描述符
  	event.events=POLLIN; 						//存放要等待发生的事件
  	ret=poll((struct pollfd *)&event,1,-1); 			//监测event，一个对象，等待5000毫秒后超时,-1为无限等待
	if(event.revents&POLLIN)
	{
	    //  unhandledTTs++;
		unhandledTTs_1++;
        //      zs_count++;
   	//	printf(" zs_unhandledTTs==%d \n", unhandledTTs);
	//	printf("unhandledTTs_1==%d \n",unhandledTTs_1);
        //      printf("zs_count==%d \n",zs_count);


	}
	}
	

}

