
#include<semaphore.h>

#include"bc.h"
#include"msg.h"


#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

#include "test.h"
#include "testlib.h"

#include "types.h"											// data structureex
extern UINT16 tc_periodNum;   							//¶šÒåÉÏ×ÜÏßÊ±ŒäÂë¹ã²¥ÖÜÆÚ
extern UINT16 st_periodNum;   							//¶šÒåÉÏ×ÜÏß×ÔŒì²âÖÜÆÚ
extern UINT16 pp_periodNum;   							//¶šÒåÉÏ×ÜÏß¹«ÓÃÊýŸÝÖÜÆÚ


//==========================time code information======================================================================
extern UINT32 g_dwTimeSec;
extern UINT16 g_wTimeMs;
extern UINT32 g_dwTickCout;

extern UINT16 g_Sysdata[3];
extern UINT16 g_Platdata[32];
extern UINT16 g_Datain[32];
extern UINT16 * g_Dataintmp;
extern UINT16  date_gap;

extern UINT8  timecodesendflag ;  						// time code flag 
extern UINT8  sysstatussendflag; 						// system status
extern UINT8  platparasendflag ;						// paltparam
extern UINT8  datainsendflag   ; 						// data inject 
extern UINT8  controlcomsendflag;						// control cmd   
extern UINT8  stresstestsendflag;



/*******************************************************************************************************************/

extern UINT8   *pPara;								// receive flag
extern UINT8   fd;
extern UINT8	timecodeflag;
extern UINT8	normalflag;
extern UINT8   datainnum;							// datainjectNUM
extern UINT8   datainframenum;							// datainframenum


extern UINT8  timecodeABflag;							//AB bus flag
extern UINT8  sysstatusABflag;
extern UINT8  platparaABflag;
extern UINT8  datainABflag;
extern UINT8  selftestABflag;
extern UINT8  controlcomABflag;
extern UINT8  stresstestABflag;			
									// BC send cmd 
extern UINT8  timecodesendflag ;  						// time code flag 
extern UINT8  sysstatussendflag; 						// system status
extern UINT8  platparasendflag ;						// paltparam
extern UINT8  datainsendflag   ; 						// data inject 
extern UINT8  controlcomsendflag;						// control cmd   
extern UINT8  stresstestsendflag;
										// mesg data  
extern UINT8	g_CollectInfodigital; 
extern UINT8   g_CollectInfodatain;
extern UINT8   g_CollectInfoplat;
extern UINT8   g_CollectInfoprj1;
extern UINT8   g_CollectInfoprj2;
extern UINT8   g_CollectInfoprj3;	

extern UINT8	g_byServUsedNum;						//Ò»žöÖ¡ÖÜÆÚÖÐ·þÎñÇëÇóµÄŽÎÊý
extern UINT8	g_byAddUsedNum;							// 32žö²åÈëÏûÏ¢µÄÎ»ÖÃÊ¹ÓÃµÄžöÊý
extern UINT16  frameperiodNum;							// Ö¡œáÊøÖÜÆÚŒÆÊý 

//================================================small period number=====================
extern UINT16 g_byPeriodNum;
extern UINT16 g_byPeriodTimNum;			//timecode small period
extern UINT16 g_byPeriodTimNum;					
extern UINT16 g_byPeriodSysNum;
extern UINT16 g_byPeriodPlaNum;

//===============================================big period number====================
extern UINT16 g_byBigPeriodNum;			
extern UINT8 timecodeperiod;
extern UINT8 sysstatusperiod;
extern UINT8 platparaperiod;

//=========================BC 61580 operation buffer ========================
extern UINT16 g_wBCCurBufPos;
extern UINT32 g_dwBCFrames;
extern UINT32 g_dwBCFrameCouter;

//=========================BC error state   =====================================
extern UINT16 g_byMainState;

//=========================BC BIT×Ö»º³åÇø==================================
extern UINT16 g_waBIT[6];
extern UINT16 g_byaPDHUdigiSize;						// PDHUÊý×ÖÁ¿ŒÆÊý

extern UINT8  g_byWriteNoteIndex;						// write data index
extern UINT8  g_bOddPeriod;							// ÆæÅŒÖÜÆÚ±êÊ¶
extern UINT8  sysTimeCode[6];							// system time code
extern UINT16 g_wRTState;
extern UINT16  CollectInfodect[32];
extern UINT16  g_wErrMsgCount;


extern UINT8	*g_CollectInfodata; 		// get collection digital dect
extern UINT8	 g_CollectInfo[92]; 		// get collection digital dect
//==========================================================================================
//    Init frame message stack 
//==========================================================================================

UINT8 BCGetMsgNo( UINT8* pbyMsgNo, UINT16* pwBlockStatus );
void BcEOFint();
void BcEOMint();

void *bc_1553()
{
	UINT8	g_bEOM;				// message interrupt 	
	UINT8	g_bEOF;				// frame interrupt
	UINT32 i,intreg_status;

	UINT16 ret;

	BC1553Binit();	
	usleep(100);	
	printf("enter the task BC\n");									
	if(!BCInit())
	{
		g_byMainState |=0x04;
	}
	else
	{
		g_byMainState &=0xFB;
	}
	
	for ( i = 0; i < 6; i++ )		
	{
		g_waBIT[i] = 0;
	}
	g_wRTState=0;	
			
	g_byaPDHUdigiSize = 0;			
	
	g_byWriteNoteIndex = 0;			
	
	g_bOddPeriod =  FALSE;

	BCSetMsgList();				

	BCCreatFrame();			

	BCRun();
	
	usleep(20);				
	while(1)
	{
			intreg_status=ReadReg(6);
			if(intreg_status&(BC_INT_EOM_FLAG|BC_INT_EOF_FLAG))	
			{	
				if(intreg_status&BC_INT_EOM_FLAG)		//EOM include() 
				{	
					g_bEOM = TRUE;				
					BcEOMint();
				}
				if(intreg_status&BC_INT_EOF_FLAG)		//EOF include()
				{	
					g_bEOF = TRUE;
					BcEOFint();
				}
			   intreg_status = 0x0000;
			}
	
			usleep(100);		
	}
							
}

void BcEOMint()
{
	UINT8	byMsgNo;
	UINT16  wBlockStatus;	
	UINT16  wStatusPos;
	UINT16  wReadPos;
	UINT16  wStatusWord;
	UINT16  wDataPos;
	UINT16  wVectorData;
	UINT16  i;	
	
	MSG_COMMAND msgCommand;

	wBlockStatus = 0;	
												/* check if any message run */
	while ( BCGetMsgNo( &byMsgNo, &wBlockStatus ))
	{	
												/* byMsgNo get readPostion and statusPos */
		BCGetMsgBlockPos( byMsgNo, NULL, &wReadPos, NULL, &wStatusPos );
		wStatusWord = ReadRam(wStatusPos);						/* check status enable  */
		if ( wStatusWord & 0x0400 )
		{
			g_wErrMsgCount++;
		}										/* data digital dect */	 
		
		 if( (byMsgNo >=DATA_INJECT_BACK)&&(byMsgNo <=PRJ_PARAM3))		/* server request */
		{	
			savebackdata(byMsgNo);
		}

		else if (byMsgNo == DIGITAL_DECT)
		{			
			wDataPos = 0x108 + byMsgNo * MSG_DATA_SIZE;
			msgCommand.CommandWord = ReadRam( wDataPos + 1 );

			ReadBlock( wDataPos+4, (UINT16 *)CollectInfodect,32 );

			g_CollectInfodata = (UINT8*)SwapToByte(CollectInfodect,32); 

			memcpy((void *)(g_CollectInfo+28),(void *)g_CollectInfodata,64);
	//		memcpy(g_CollectInfodata,CollectInfodect,64);

	//		for(i=0;i<32;i++)
	//		{
	//			printf("%x\t",g_CollectInfodata[i]);
	//		}
	//		printf("\n");
			g_CollectInfodigital=1;
		}
		
		 else  if( byMsgNo == VECTOR_BICC)							/* vector server request */
		{
			if (((wBlockStatus & RT_NO_RESPONSE)!= RT_NO_RESPONSE)&&((wStatusWord & SERVER_REQ)==SERVER_REQ))
			{	
				wVectorData = ReadRam( wReadPos );
				//i =0;
				//while ( ( wVectorData != 0 ) && (g_byServUsedNum < SER_REQ_NUM) && (g_byAddUsedNum < SEQ_REQ_NUM)&& (i < 16)) 
				/* 服务请求没有超过32个 */    /* 消息帧中工程参数采集消息小于32 */  	 /* 子地址没有增加到16 */
				if( wVectorData != 0)	
				{
					if ( wVectorData & 0x0001 )
					{	
						BCSetMsgInFrame( SEQ_REQ_START, PRJ_PARAM1, DATA_TRANS_GAP );
						g_byServUsedNum++;
						g_byAddUsedNum++;
					}
					if ( wVectorData & 0x0002 )
					{	
						BCSetMsgInFrame( SEQ_REQ_START+1, PRJ_PARAM2, DATA_TRANS_GAP );
						g_byServUsedNum++;
						g_byAddUsedNum++;
					}
					if ( wVectorData & 0x0004 )
					{	
						BCSetMsgInFrame( SEQ_REQ_START+2, DATA_INJECT_BACK, DATA_TRANS_GAP );
						g_byServUsedNum++;
						g_byAddUsedNum++;
					}
					if ( wVectorData & 0x0008 )
					{	
						BCSetMsgInFrame( SEQ_REQ_START+3, PRJ_PARAM3, DATA_TRANS_GAP );
						g_byServUsedNum++;
						g_byAddUsedNum++;
					}
					if ( wVectorData & 0x0010 )
					{	
						BCSetMsgInFrame( SEQ_REQ_START+4, PLAT_PARAM_BACK, DATA_TRANS_GAP );
						g_byServUsedNum++;
						g_byAddUsedNum++;
					}
				//	i++;
				}
				
			}
		}

		
	}		
}
void BcEOFint()
{
	UINT8 i;
	UINT32 dwCurTimeSec;
	UINT16 wCurTimeMs;	
	UINT8 byaTimeCode[6];					 

	g_byPeriodNum    = (g_byPeriodNum+1) & 0x7F;		      		//64ms  Small period+1
	g_byPeriodTimNum = (g_byPeriodTimNum+1)&0x7f;	
	g_byPeriodSysNum = (g_byPeriodSysNum+1)&0x7f;
	g_byPeriodPlaNum = (g_byPeriodPlaNum+1)&0x7f;	

	frameperiodNum++;
	g_byAddUsedNum = 0;
	g_byServUsedNum = 0;

	if ( g_byPeriodNum % BEGINPERIOD == 0 )	 				//512ms周期
	{
		g_byPeriodNum = 0;					/* 8个小周期后，大周期计数加1 */
		g_byBigPeriodNum++;
		if ( g_byBigPeriodNum == 4 )
		{
			g_byBigPeriodNum = 0;
		}
	}
	
	if(g_byPeriodTimNum % timecodeperiod ==0)
		g_byPeriodTimNum =0;
	if(g_byPeriodSysNum % sysstatusperiod == 0)
		g_byPeriodSysNum =0;	
	if(g_byPeriodPlaNum % platparaperiod == 0)
		g_byPeriodPlaNum =0;
	
	
//	BCSetMsgInFrame(SYS_MESSAGE_START-1, VECTOR_BICC, VECTOR_WORD_GAP );
	
	for ( i = 3; i < MSG_NUM_FRAME; i++ )				   	//MSG_NUM_FRAME
	{		
		BCSetMsgInFrame( i, EMPTY_MESSAGE, EMPTY_MSG_GAP );
	}	

				/* 时间码 */

	if((timecodesendflag==0x01) && (g_byPeriodNum % timecodeperiod == 0))	//时间码发送不变
	{

		BCSetMsgInFrame( SYS_MESSAGE_START+6, TIME_CODE, DATA_TRANS_GAP );	
	}
	
	else if((timecodesendflag==0x02) && (g_byPeriodNum % timecodeperiod == 0)) 		//时间码周期同步发送
	{

		dwCurTimeSec = g_dwTimeSec;
		wCurTimeMs = g_wTimeMs;
								     	  			/* 给时间码缓冲区赋值 */
		byaTimeCode[0] = (UINT8)(dwCurTimeSec >> 24);
		byaTimeCode[1] = (UINT8)(dwCurTimeSec >> 16);
		byaTimeCode[2] = (UINT8)(dwCurTimeSec >> 8);
		byaTimeCode[3] = (UINT8)dwCurTimeSec;
		byaTimeCode[4] = (UINT8)(wCurTimeMs >> 8);
		byaTimeCode[5] = (UINT8)wCurTimeMs;
	
		BCWriteData( TIME_CODE, SwapToWord(byaTimeCode, 6) );

		g_wTimeMs+=1024;								//修正时间
		if(g_wTimeMs >= 2000)
		{
			g_wTimeMs -=2000;
			g_dwTimeSec++;
		}		
		
		BCSetMsgInFrame( SYS_MESSAGE_START+6, TIME_CODE, DATA_TRANS_GAP );			
	}
	else if((timecodesendflag==0x04) && (g_byPeriodNum % BEGINPERIOD == 0))
	{
		g_wTimeMs+=1024;								//修正时间
		if(g_wTimeMs >= 2000)
		{
			g_wTimeMs -=2000;
			g_dwTimeSec++;
		}		
			
		dwCurTimeSec = g_dwTimeSec;
		wCurTimeMs = g_wTimeMs;
											/* 给时间码缓冲区赋值 */
		byaTimeCode[0] = (UINT8)(dwCurTimeSec >> 24);
		byaTimeCode[1] = (UINT8)(dwCurTimeSec >> 16);
		byaTimeCode[2] = (UINT8)(dwCurTimeSec >> 8);
		byaTimeCode[3] = (UINT8)dwCurTimeSec;
		byaTimeCode[4] = (UINT8)(wCurTimeMs >> 8);
		byaTimeCode[5] = (UINT8)wCurTimeMs;

		BCWriteData( TIME_CODE, SwapToWord(byaTimeCode, 6));

		BCSetMsgInFrame( SYS_MESSAGE_START+6, TIME_CODE, DATA_TRANS_GAP );			
	}
	else if ( timecodesendflag == 0x03 )						//时间码单次发送（BUG: 有可能会被发送两次）
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+6, TIME_CODE, DATA_TRANS_GAP );			
		timecodesendflag = 0;
	}
	


					/* 系统状态 */
	if((sysstatussendflag==0x01) && (g_byPeriodNum % sysstatusperiod == 0))		//系统状态周期不变发送
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+1, SYS_STATE, DATA_TRANS_GAP );
	}
	else if((sysstatussendflag==0x02) && (g_byPeriodNum % sysstatusperiod == 0))		//系统状态周期变发送
	{
		for(i=0;i<3;i++)
		{
			if(g_Sysdata[i] == 0xffff)
				g_Sysdata[i] = 0x0000;		
		}
		BCWriteData(SYS_STATE, g_Sysdata);
		BCSetMsgInFrame( SYS_MESSAGE_START+1, SYS_STATE, DATA_TRANS_GAP );
		for(i=0;i<3;i++)
		{
			g_Sysdata[i] +=0x0101;		
		}

	}
	else if (sysstatussendflag == 0x03) 
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+1, SYS_STATE, DATA_TRANS_GAP );		//系统状态单次发送
		sysstatussendflag = 0;
	}
	else if ((sysstatussendflag == 0x04) && (g_byPeriodNum % BEGINPERIOD == 0))		// 初始化周期发送
	{
				
		g_Sysdata[0] = g_Sysdata[0]+1;
		BCWriteData(SYS_STATE, g_Sysdata);
		BCSetMsgInFrame( SYS_MESSAGE_START+1, SYS_STATE, DATA_TRANS_GAP );
	}


				/* 平台参数 */
	if ( (platparasendflag == 0x01) && ( g_byPeriodNum % platparaperiod == 0 ) )		//平台参数周期不变发送
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+2, PLAT_PARAM, DATA_TRANS_GAP );
	}
	else if( (platparasendflag == 0x02) && ( g_byPeriodNum % platparaperiod == 0 ))	// 平台参数周期变发送
	{
		for(i=0;i<32;i++)
		{
			if(g_Platdata[i] ==0xffff)
				g_Platdata[i]=0x0000;
		}
		BCWriteData( PLAT_PARAM, g_Platdata);
	
		BCSetMsgInFrame( SYS_MESSAGE_START+2, PLAT_PARAM, DATA_TRANS_GAP );		// plant to plant_frame	
		for(i=0;i<32;i++)
		{
			g_Platdata[i]+=0x0101;
		}
	}
	else if ( platparasendflag == 0x03 )							//平台参数单次发送
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+2, PLAT_PARAM, DATA_TRANS_GAP );
		platparasendflag = 0;
	}
	else if((platparasendflag == 0x04) && (g_byPeriodNum % BEGINPERIOD == 0))
	{

		g_Platdata[0]=g_Platdata[0]+1;
	
		BCWriteData( PLAT_PARAM, g_Platdata);
		BCSetMsgInFrame( SYS_MESSAGE_START+2, PLAT_PARAM, DATA_TRANS_GAP );	
	}



	if (g_byPeriodNum % BEGINPERIOD == 0)			      					//数字量遥测参数 上电之后每512MS 	执行一次 
	{

		BCSetMsgInFrame( SYS_MESSAGE_START+5, DIGITAL_DECT, DATA_TRANS_GAP );
	}
	

	if(datainsendflag ==0x01)								// DATA_INJECT 正常发送
	{	
		BCSetMsgInFrame( SYS_MESSAGE_START+4, DATA_INJECT, DATA_TRANS_GAP );	
		datainsendflag = 0x00;
		printf(".................11\n");	
	}
	
	if(controlcomsendflag==0x01)								// control command 单次突发式normal发送
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+3, CONTROL_CMD, DATA_TRANS_GAP );
	    	controlcomsendflag=0x00;
	}
	else if(controlcomsendflag==0x02)							// control command 单次突发式广播
	{
		BCSetMsgInFrame( SYS_MESSAGE_START+3, CONTROL_CMD_B, DATA_TRANS_GAP );
	    	controlcomsendflag=0x00;
	}
	
	if(stresstestsendflag==0x01)
	{
		for(i=0;i<datainframenum;i++)
		{
			g_Datain[1]=(UINT16)(i<<8)+0x003c;
			BCWriteData(LOAD_INPUT_START+i,g_Datain);
			BCSetMsgInFrame( STRESS_START+i, LOAD_INPUT_START+i, date_gap );
		}
		datainframenum = 0x00;
		stresstestsendflag==0x00;
		
	}

}


